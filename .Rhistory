list.files()\
list.files()
library(readr)
library(ggplot2)
library(caret)
training.raw <- read_csv("pml-training.csv")
test.raw <- read_csv("pml-testing.csv")
View(training.raw)
table(training.raw$amplitude_yaw_dumbbell)
col.names(training.raw)
colnames(training.raw)
table(training.raw$classe)
table(training.raw$raw_timestamp_part_1)
table(training.raw$new_window)
table(training.raw$user_name)
library(dplyr)
library(magrittr)
training.raw %>% filter(user_name == "carlitos")
training.raw %>% filter(user_name == "carlitos") %>% View()
table(training.raw$kurtosis_picth_belt)
str(training.raw)
training.raw$user_name <- as.factor(training.raw$user_name)
str(training.raw$classe)
training.raw$classe <- as.factor(training.raw$classe)
training.raw$new_window <- as.factor(training.raw$new_window)
table(training.raw$num_window)
table(training.raw$total_accel_belt)
training.raw %>% filter(user_name == "carlitos") %>% training.raw$raw_timestamp_part_1
training.raw %>% filter(user_name == "carlitos") %>% table(training.raw$raw_timestamp_part_1)
training.raw %>% filter(user_name == "carlitos") %>% View()
training.raw %>% filter(user_name == "carlitos") -> carlos.raw
View(carlito)
View(carlos.raw)
table(carlos.raw$raw_timestamp_part_1)
table(carlos.raw$classe)
?read_csv
training.raw1 <- read.csv("pml-training.csv")
View(training.raw1)
data <- training.raw
training_data <- training.raw
training.raw <- read_csv("pml-training.csv")
test.raw <- read_csv("pml-testing.csv")
training_data <- training.raw
training_set= createDataPartition(y=training_data$classe, p=0.8, list=FALSE)
training_set= createDataPartition(y=training_data$classe, p=0.8, list=FALSE)
training = data[training_set,]
testing = data[-training_set,]
training_set= createDataPartition(y=training_data$classe, p=0.8, list=FALSE)
training = data[training_set,]
testing = data[-training_set,]
training_set= createDataPartition(training_data$classe, p=0.8, list=FALSE)
training = data[training_set,]
library(randomForest)
training.raw <- read_csv("pml-training.csv")
test.raw <- read_csv("pml-testing.csv")
training.raw$user_name <- as.factor(training.raw$user_name)
training.raw$classe <- as.factor(training.raw$classe)
training.raw$new_window <- as.factor(training.raw$new_window)
training_subset= createDataPartition(training.raw$classe, p=0.8, list=FALSE)
training_subset1= createDataPartition(training.raw$classe, p=0.8, list=FALSE)
training_subset= createDataPartition(training.raw$classe, p=0.8, list=FALSE)
training_subset= createDataPartition(training.raw$classe, p=0.8, list=FALSE)
training_data = training.raw[training_subset,]
training.raw <- read_csv("pml-training.csv")
test.raw <- read_csv("pml-testing.csv")
training.raw$user_name <- as.factor(training.raw$user_name)
training.raw$classe <- as.factor(training.raw$classe)
training.raw$new_window <- as.factor(training.raw$new_window)
#Setting Random Seed for Reproducibility & Creating our training/test sets
set.seed(158998)
training_subset= createDataPartition(training.raw$classe, p=0.8, list=FALSE)
training_data = training.raw[training_subset,]
testing_data = training.raw[-training_subset,]
dim(testing_data)
table(training.raw$kurtosis_picth_belt)
na_test sapply(training_data,function(x) {sum(is.na(x))})
na_test <- sapply(training_data,function(x) {sum(is.na(x))})
table(na_test)
training.raw
training.raw[1]
training.raw[1] <- NULL
training.raw$cvtd_timestamp <- NULL
training.raw[10:24] <- NULL
training.raw$kurtosis_roll_belt<- NULL
training.raw$cvtd_timestamp <- NULL
training.raw$kurtosis_roll_belt<- NULL
training.raw$kurtosis_yaw_arm <- NULL
training.raw$kurtosis_yaw_belt <- NULL
training.raw$kurtosis_picth_belt <- NULL
View(omit.na(training.raw))
View(na.omit(training.raw))
training.raw <- read_csv("pml-training.csv")
test.raw <- read_csv("pml-testing.csv")
#Data Processing
training.raw$user_name <- as.factor(training.raw$user_name)
training.raw$classe <- as.factor(training.raw$classe)
training.raw$new_window <- as.factor(training.raw$new_window)
training.raw <- na.omit(training.raw)
View(training.raw)
str(training.raw)
training.raw <- read_csv("pml-training.csv")
test.raw <- read_csv("pml-testing.csv")
#Data Processing
training.raw$user_name <- as.factor(training.raw$user_name)
training.raw$classe <- as.factor(training.raw$classe)
training.raw$new_window <- as.factor(training.raw$new_window)
training.raw <- na.omit(training.raw)
training.raw <- read_csv("pml-training.csv")
test.raw <- read_csv("pml-testing.csv")
#Data Processing
training.raw$user_name <- as.factor(training.raw$user_name)
training.raw$classe <- as.factor(training.raw$classe)
training.raw$new_window <- as.factor(training.raw$new_window)
training.raw <- na.omit(training.raw)
library(readr)
library(ggplot2)
library(caret)
library(dplyr)
library(magrittr)
library(randomForest)
#Load our data
training.raw <- read_csv("pml-training.csv")
test.raw <- read_csv("pml-testing.csv")
#Data Processing
training.raw$user_name <- as.factor(training.raw$user_name)
training.raw$classe <- as.factor(training.raw$classe)
training.raw$new_window <- as.factor(training.raw$new_window)
```
names(training.raw)
read_csv?
?read_csv
training.raw <- read_csv("pml-training.csv", na = "NA", "#DIV/0!", "")
training.raw <- read_csv("pml-training.csv", na.strings = "NA", "#DIV/0!", "")
training.raw <- read_csv("pml-training.csv", na = c("NA", "#DIV/0!", ""))
training.raw <- read.csv("pml-training.csv", na.strings = "NA", "#DIV/0!", "")
training.raw <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
test.raw <- read.csv("pml-testing.csv", na.strings = c("NA", "#DIV/0!", ""))
training.raw$user_name <- as.factor(training.raw$user_name)
training.raw$classe <- as.factor(training.raw$classe)
training.raw$new_window <- as.factor(training.raw$new_window)
near_zero_variance <- nearZeroVar(training.raw, saveMetrics=TRUE)
names(training.raw)
?nearZeroVar
sensorColumns = grep(pattern = "_belt|_arm|_dumbbell|_forearm", names(pml_training_data))
sensorColumns = grep(pattern = "_belt|_arm|_dumbbell|_forearm", names(training.raw))
sensorColumns
training.raw
training.raw[sensorColumns]
View(training.raw[sensorColumns])
length(training.raw[sensor])
length(training.raw[sensorColumns])
training.raw <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
test.raw <- read.csv("pml-testing.csv", na.strings = c("NA", "#DIV/0!", ""))
#Data Processing
training.raw$user_name <- as.factor(training.raw$user_name)
training.raw$classe <- as.factor(training.raw$classe)
training.raw$new_window <- as.factor(training.raw$new_window)
training.raw$user_name <- NULL
training.raw$X <- NULL
nas <- colSums(is.na(training.raw))
library(readr)
library(ggplot2)
library(caret)
library(dplyr)
library(magrittr)
library(randomForest)
#Load our data
training.raw <- read.csv("pml-training.csv", na.strings = c("NA", "#DIV/0!", ""))
test.raw <- read.csv("pml-testing.csv", na.strings = c("NA", "#DIV/0!", ""))
#Data Processing
training.raw$user_name <- as.factor(training.raw$user_name)
training.raw$classe <- as.factor(training.raw$classe)
training.raw$new_window <- as.factor(training.raw$new_window)
nas <- colSums(is.na(training.raw))
table(nas)
training.raw <- read.csv("pml-training.csv")
nas <- colSums(is.na(training.raw))
table(nas)
training.raw <- read_csv("pml-training.csv")
nas <- colSums(is.na(training.raw))
table(nas)
training.raw <- read.csv("pml-training.csv")
nas <- colSums(is.na(training.raw))
table(nas)
table(training.raw$user_name)
ggplot(training.raw, aes(x = classe)) + geom_histogram(fill = user_name)
ggplot(training.raw, aes(x = classe)) + geom_histogram(fill = "user_name")
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name))
)
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name)))
test.raw <- read.csv("pml-testing.csv")
str(trainng.raw)
str(training.raw)
View(test.raw)
View(training.raw)
testcolumns <- names(test.raw)
trainingcolumns <- names(training.raw)
trainingcolumns == testcolumns
table(training.raw$classe)
str(training.raw)[1]
str(training.raw)[2]
str(training.raw)[1][1]
str(training.raw)
training.raw <- read.csv("pml-training.csv")
test.raw <- read.csv("pml-testing.csv")
str(training.raw)
str(test.rwa)
str(test.raw)
ncol(test.raw)
names(test.raw)
table(training.raw$classe)
test.raw.data.columns <- names(test.raw)
training.raw.data.columns <- names(training.raw)
test.raw.data.columns == training.raw.data.columns
test.raw_append <- test.raw[,1:159]
names(test.raw)
names(test.raw_append)
names(training.raw)
test.raw_append$classe <- NA
View(test.raw_append)
View(test.raw_append[,150:160])
names(training.raw) == test.raw_append
names(training.raw) == names(test.raw_append)
test.raw_append$classe <- factor(test.raw_append$classe)
str(test.raw_append)
str(test.raw_append$classe)
comp2 <- unlist(lapply(test.raw_append, class)) != unlist(lapply(training.raw, class))
class(test.raw_append)
comp2factinds <-which(as.logical(comp2))
comp2 <- unlist(lapply(test.raw_append, class)) != unlist(lapply(training.raw, class))
comp2factinds <-which(as.logical(comp2))
comp2factinds
class(test.raw_append)
lapply(training.raw,class)
x <- unlist(lapply(training.raw, class))
x
unlist(lapply(test.raw_append, class)) != unlist(lapply(training.raw, class))
compare_atomic_types <- unlist(lapply(test.raw_append, class)) != unlist(lapply(training.raw, class))
different_atomic_types <-which(as.logical(comp2))
different_atomic_types
compare_atomic_types <- unlist(lapply(test.raw_append, class)) != unlist(lapply(training.raw, class))
different_atomic_types <-which(as.logical(compare_atomic_types))
different_atomic_types
training.raw <- read.csv("pml-training.csv")
test.raw <- read.csv("pml-testing.csv")
table(training.raw$user_name)
table(training.raw$classe)
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name)))
test.raw_append <- test.raw[,1:159]
test.raw_append$classe <- NA
test.raw_append$classe <- factor(test.raw_append$classe)
compare_atomic_types <- unlist(lapply(test.raw_append, class)) != unlist(lapply(training.raw, class))
different_atomic_types <-which(as.logical(compare_atomic_types))
different_atomic_types
test.raw_append[sapply(test.raw_append, is.logical)] <- lapply(test.raw_append[sapply(test.raw_append, is.logical)], as.factor)
str(test.raw_append)
temp1 <- lapply(different_atomic_types, FUN<- function(x){test.raw_append[,x] <- factor(test.raw_append[,x])})
temp2 <- unlist(lapply(test.raw_append, class))
temp3 <- unlist(lapply(training.raw, class))
comp3 <- unlist(temp2 != temp3)
comp3factinds <-which(as.logical(comp3))
ntraining_before <- nrow(training.raw)
training <- rbind(training.raw, test.raw_append)
ntraining_after <-  nrow(training.raw)
rm(test.raw_append)
training.raw <- rbind(training.raw, test.raw_append)
training.raw <- read.csv("pml-training.csv")
test.raw <- read.csv("pml-testing.csv")
# Exploratory Analysis
table(training.raw$user_name)
table(training.raw$classe)
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name)))
test.raw_append <- test.raw[,1:159]
test.raw_append$classe <- NA
test.raw_append$classe <- factor(test.raw_append$classe)
#Resolving different column atomic types
compare_atomic_types <- unlist(lapply(test.raw_append, class)) != unlist(lapply(training.raw, class))
different_atomic_types <-which(as.logical(compare_atomic_types))
test.raw_append[sapply(test.raw_append, is.logical)] <- lapply(test.raw_append[sapply(test.raw_append, is.logical)], as.factor)
temp1 <- lapply(different_atomic_types, FUN<- function(x){test.raw_append[,x] <- factor(test.raw_append[,x])})
temp2 <- unlist(lapply(test.raw_append, class))
temp3 <- unlist(lapply(training.raw, class))
comp3 <- unlist(temp2 != temp3)
comp3factinds <-which(as.logical(comp3))
ntraining_before <- nrow(training.raw)
training.raw <- rbind(training.raw, test.raw_append)
ntraining_after <-  nrow(training.raw)
training.raw <- read.csv("pml-training.csv")
test.raw <- read.csv("pml-testing.csv")
# Exploratory Analysis
table(training.raw$user_name)
table(training.raw$classe)
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name)))
test.raw_append <- test.raw[,1:159]
test.raw_append$classe <- NA
test.raw_append$classe <- factor(test.raw_append$classe)
#Resolving different column atomic types
compare_atomic_types <- unlist(lapply(test.raw_append, class)) != unlist(lapply(training.raw, class))
different_atomic_types <-which(as.logical(compare_atomic_types))
test.raw_append[sapply(test.raw_append, is.logical)] <- lapply(test.raw_append[sapply(test.raw_append, is.logical)], as.factor)
training.raw <- rbind(training.raw, test.raw_append)
rm(test.raw_append)
str(test.raw)
str(training.raw)
regular_expression <- "(^roll|^pitch|^yaw|classe|user_name|.*_x$|.*_y$|.*_z$).*"
selected_columns <-grep(regular_expression, names(training.raw), perl=TRUE, value=TRUE)
training.raw[,selected_columns]
training.raw <- training.raw[,selected_columns]
selected_columns
contents(training.raw)
View(training.raw)
str(training.raw)
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name))) + xlab("Classes")
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name))) + xlab("Classes") + ylab("Total Count") + title("Total Classes per User")
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name))) + xlab("Classes") + ylab("Total Count") + ggtitle("Total Classes per User")
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name))) + xlab("Classes") + ylab("Total Count") + ggtitle("Total Classes per User") + guide_legend("Usernames")
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name))) + xlab("Classes") + ylab("Total Count") + ggtitle("Total Classes per User") + guides(fill = guide_legend(title = "Usernames"))
library(RWeka)
install.packages("RWeka")
library(RWeka)
install.packages("Rjava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rWeka")
install.packages("RWeka")
library(RWeka)
library(readr)
library(ggplot2)
library(caret)
library(dplyr)
library(magrittr)
library(randomForest)
library(RWeka)
training.raw <- read.csv("pml-training.csv")
test.raw <- read.csv("pml-testing.csv")
# Exploratory Analysis
table(training.raw$user_name)
table(training.raw$classe)
ggplot(training.raw, aes(x = classe)) + geom_histogram(aes(fill = factor(user_name))) + xlab("Classes") + ylab("Total Count") + ggtitle("Total Classes per User") + guides(fill = guide_legend(title = "Usernames"))
test.raw_append <- test.raw[,1:159]
test.raw_append$classe <- NA
test.raw_append$classe <- factor(test.raw_append$classe)
compare_atomic_types <- unlist(lapply(test.raw_append, class)) != unlist(lapply(training.raw, class))
different_atomic_types <-which(as.logical(compare_atomic_types))
test.raw_append[sapply(test.raw_append, is.logical)] <- lapply(test.raw_append[sapply(test.raw_append, is.logical)], as.factor)
training.raw <- rbind(training.raw, test.raw_append)
rm(test.raw_append)
regular_expression <- "(^roll|^pitch|^yaw|classe|user_name|.*_x$|.*_y$|.*_z$).*"
selected_columns <-grep(regular_expression, names(training.raw), perl=TRUE, value=TRUE)
training.raw <- training.raw[,selected_columns]
test.data <- tail(training.raw,20)
train.data <- training[-20,]
train.data <- training.data[-20,]
train.data <- training.raw[-20,]
View(test.data)
View(train.dat)
View(train.data)
fit <- J48(classe ~ ., data = train.data)
summary(fit)
predictions <- predict(fit, newdata = test.data)
tail(predictions, 20)
pwd
getwd()
submission_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
submission_files(predictions)
list.files()
